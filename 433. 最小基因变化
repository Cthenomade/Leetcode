class Solution {
public:
    //bfs搜索，每次替换一个试试，直到找到end位置，若最终都没有找到end，则返回0.
    int minMutation(string start, string end, vector<string>& bank) {
        unordered_set<string> mp,visited;
        char chg[4] = {'A','C','G','T'};
        for(string& s : bank){
            mp.emplace(s);
        }
        queue<string> q;
        q.emplace(start);
        visited.emplace(start);
        int step = 0;
        while(!q.empty()){
            int sz = q.size();
            for(int i = 0;i < sz;i++){
                string cur = q.front();
                if(cur == end) return step;
                q.pop();
                for(int j = 0;j < 8;j++){
                    string nxt = cur;
                    for(int k = 0;k < 4;k++){
                        if(cur[j] != chg[k]){
                            nxt[j] = chg[k];
                            if(mp.count(nxt) && !visited.count(nxt)){
                                q.emplace(nxt);
                                visited.emplace(nxt);
                            }
                        }
                    }
                }
            }
            step++;
        }

        return -1;
    }   
};
